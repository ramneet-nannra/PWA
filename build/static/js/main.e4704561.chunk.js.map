{"version":3,"sources":["NavbarElements.js","Navbar.js","Home.js","Table.js","About.js","Graph.js","PieChart.js","Reports.js","App.js","reportWebVitals.js","index.js","serviceWorkerRegistration.js"],"names":["Nav","styled","nav","NavLink","Link","Bars","FaBars","NavMenu","div","Navbar","to","activeStyle","Home","style","display","justifyContent","width","height","src","am4core","am4themes_animated","Table","useState","tableData","setTableData","useEffect","fetch","then","res","json","className","id","map","name","email","body","About","alignItems","url","Graph","chart","am4charts","paddingRight","data","visits","i","Math","round","random","push","date","Date","value","xAxes","renderer","grid","template","location","valueAxis","yAxes","tooltip","disabled","minWidth","series","dataFields","dateX","valueY","tooltipText","cursor","scrollbarX","PieChart","piechartData","setPieChartData","fetchData","a","response","user","length","pieChart","pieSeries","category","Reports","path","exact","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","swUrl","process","navigator","serviceWorker","register","console","log","serviceworker"],"mappings":"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","file":"static/js/main.e4704561.chunk.js","sourcesContent":["import { FaBars } from \"react-icons/fa\";\nimport { NavLink as Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const Nav = styled.nav`\n  background: #63d471;\n  height: 85px;\n  display: flex;\n  justify-content: center;\n  padding: 0.2rem calc((100vw - 1000px) / 2);\n  z-index: 12;\n  /* Third Nav */\n  /* justify-content: flex-start; */\n`;\n\nexport const NavLink = styled(Link)`\n  color: #808080;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  padding: 0 1rem;\n  height: 100%;\n  cursor: pointer;\n  &.active {\n    color: #000000;\n  }\n`;\n\nexport const Bars = styled(FaBars)`\n  display: none;\n  color: #808080;\n  @media screen and (max-width: 768px) {\n    display: block;\n    position: absolute;\n    top: 0;\n    right: 0;\n    transform: translate(-100%, 75%);\n    font-size: 1.8rem;\n    cursor: pointer;\n  }\n`;\n\nexport const NavMenu = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  justify-content: center;\n  max-width: 100%;\n  /* Second Nav */\n  margin-right: 24px;\n  /* Third Nav */\n  width: 100vw;\n  white-space: nowrap;\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NavBtn = styled.nav`\n  display: flex;\n  align-items: center;\n  margin-right: 24px;\n  /* Third Nav */\n  justify-content: flex-end;\n  width: 100vw;\n  @media screen and (max-width: 768px) {\n    display: none;\n  }\n`;\n\nexport const NavBtnLink = styled(Link)`\n  border-radius: 4px;\n  background: #808080;\n  padding: 10px 22px;\n  color: #000000;\n  outline: none;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  text-decoration: none;\n  /* Second Nav */\n  margin-left: 24px;\n  &:hover {\n    transition: all 0.2s ease-in-out;\n    background: #fff;\n    color: #808080;\n  }\n`;\n","import React from \"react\";\nimport { Nav, NavLink, Bars, NavMenu } from \"./NavbarElements\";\n\nconst Navbar = () => {\n  return (\n    <>\n      <Nav>\n        <Bars />\n\n        <NavMenu>\n          <NavLink to=\"/about\" activeStyle>\n            About\n          </NavLink>\n          <NavLink to=\"/table\" activeStyle>\n            Table\n          </NavLink>\n          <NavLink to=\"/graph\" activeStyle>\n            Graph\n          </NavLink>\n          <NavLink to=\"/pie-chart\" activeStyle>\n            Pie Chart\n          </NavLink>\n        </NavMenu>\n      </Nav>\n    </>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\n\nconst Home = () => {\n  return (\n    <div style={{display: \"flex\" , justifyContent: \"center\"}}>\n      <img style={{ width: \"700px\", height: \"700px\"}} src=\"PWA.jpg\"></img>\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\n\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\nconst Table = () => {\n  const [tableData, setTableData] = useState([]);\n\n  //Fetch call for table data on did mount\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/comments\")\n      .then((res) => res.json())\n      .then((json) => setTableData(json));\n  }, []);\n\n  return (\n    <div className=\"page\" id=\"page\">\n      <table id=\"newtable\">\n        <thead>\n          <tr>\n            <th>Id</th>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Body</th>\n          </tr>\n        </thead>\n        <tbody>\n          {tableData.map(({ id, name, email, body }) => (\n            <tr>\n              <td>{id}</td>\n              <td>{name}</td>\n              <td>{email}</td>\n              <td>{body}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport ReactPlayer from 'react-player';\n\nconst About = () => {\n  return (\n    <div\n    style={{\n              display: 'flex',\n              justifyContent: 'Center',\n              alignItems: 'Center',\n              height: '100vh'\n            }}>\n      <ReactPlayer\n        url=\"https://www.youtube.com/watch?v=cmGr0RszHc8&t=95s\"\n      />\n    </div>\n  )\n}\n\nexport default About;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n\nam4core.useTheme(am4themes_animated);\n\nconst Graph = () => {\n  //  Line Chart on mount.\n  //  Can be replaced with the fake fetch random api\n  useEffect(() => {\n    let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\n    chart.paddingRight = 20;\n    let data = [];\n    let visits = 10;\n    for (let i = 1; i < 366; i++) {\n      visits += Math.round((Math.random() < 0.5 ? 1 : -1) * Math.random() * 10);\n      data.push({\n        date: new Date(2018, 0, i),\n        name: \"name\" + i,\n        value: visits,\n      });\n    }\n    chart.data = data;\n    let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\n    dateAxis.renderer.grid.template.location = 0;\n    let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\n    valueAxis.tooltip.disabled = true;\n    valueAxis.renderer.minWidth = 35;\n    let series = chart.series.push(new am4charts.LineSeries());\n    series.dataFields.dateX = \"date\";\n    series.dataFields.valueY = \"value\";\n    series.tooltipText = \"{valueY.value}\";\n    chart.cursor = new am4charts.XYCursor();\n    let scrollbarX = new am4charts.XYChartScrollbar();\n    scrollbarX.series.push(series);\n    chart.scrollbarX = scrollbarX;\n  }, []);\n\n  return (\n    <div className=\"page\" id=\"page\">\n      <div className=\"wrapper\">\n        <div id=\"chartdiv\" style={{ width: \"100%\", height: \"500px\" }}></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Graph;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nam4core.useTheme(am4themes_animated);\nconst PieChart = () => {\n  const [piechartData, setPieChartData] = useState([]);\n  // Create chart instance\n  const fetchData = async () => {\n    // Adding data fetched from fake api\n    let response = await fetch(\n      \"https://mocki.io/v1/ffbdd52e-e44f-4bbd-950c-12cab418b363\"\n    );\n    let user = await response.json();\n    setPieChartData(user);\n    // Add and configure Series\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  useEffect(() => {\n    if (piechartData.length) {\n      let pieChart = am4core.create(\"pieChart\", am4charts.PieChart);\n      pieChart.data = piechartData;\n      let pieSeries = pieChart.series.push(new am4charts.PieSeries());\n      pieSeries.dataFields.value = \"litres\";\n      pieSeries.dataFields.category = \"country\";\n    }\n  }, [piechartData])\n  return (\n    <div className=\"page\" id=\"page\">\n      <div className=\"wrapper\">\n        <div id=\"pieChart\" style={{ width: \"100%\", height: \"500px\" }}></div>\n      </div>\n    </div>\n  );\n};\nexport default PieChart;","\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\nimport Navbar from \"./Navbar\";\nimport Home from \"./Home\";\nimport Table from \"./Table\";\nimport About from \"./About\";\nimport Graph from \"./Graph\";\nimport PieChart from \"./PieChart\";\n\nam4core.useTheme(am4themes_animated);\n\nconst Reports = () => {\n  const [tableData, setTableData] = useState([]);\n\n  //Fetch call for table data on did mount\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/comments\")\n      .then((res) => res.json())\n      .then((json) => setTableData(json));\n  }, []);\n\n  return (\n    <div className=\"page\" id=\"page\">\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/about\" exact component={About} />\n          <Route path=\"/table\" component={Table} />\n          <Route path=\"/graph\" component={Graph} />\n          <Route path=\"/pie-chart\" component={PieChart} />\n        </Switch>\n      </Router>\n    </div>\n  );\n};\n\nexport default Reports;","import './App.css';\nimport Reports from './Reports';\n\nfunction App() {\n  return (\n    <Reports />\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport serviceworker from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\n// serviceWorkerRegistration.register();\nserviceworker();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// // This optional code is used to register a service worker.\n// // register() is not called by default.\n\n// // This lets the app load faster on subsequent visits in production, and gives\n// // it offline capabilities. However, it also means that developers (and users)\n// // will only see deployed updates on subsequent visits to a page, after all the\n// // existing tabs open on the page have been closed, since previously cached\n// // resources are updated in the background.\n\n// // To learn more about the benefits of this model and instructions on how to\n// // opt-in, read https://cra.link/PWA\n\n// const isLocalhost = Boolean(\n//   window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.0/8 are considered localhost for IPv4.\n//     window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n// );\n\n// export function register(config) {\n//   if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n//     // The URL constructor is available in all browsers that support SW.\n//     const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n//     if (publicUrl.origin !== window.location.origin) {\n//       // Our service worker won't work if PUBLIC_URL is on a different origin\n//       // from what our page is served on. This might happen if a CDN is used to\n//       // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n//       return;\n//     }\n\n//     window.addEventListener('load', () => {\n//       const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n//       if (isLocalhost) {\n//         // This is running on localhost. Let's check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, config);\n\n//         // Add some additional logging to localhost, pointing developers to the\n//         // service worker/PWA documentation.\n//         navigator.serviceWorker.ready.then(() => {\n//           console.log(\n//             'This web app is being served cache-first by a service ' +\n//               'worker. To learn more, visit https://cra.link/PWA'\n//           );\n//         });\n//       } else {\n//         // Is not localhost. Just register service worker\n//         registerValidSW(swUrl, config);\n//       }\n//     });\n//   }\n// }\n\n// function registerValidSW(swUrl, config) {\n//   navigator.serviceWorker\n//     .register(swUrl)\n//     .then((registration) => {\n//       registration.onupdatefound = () => {\n//         const installingWorker = registration.installing;\n//         if (installingWorker == null) {\n//           return;\n//         }\n//         installingWorker.onstatechange = () => {\n//           if (installingWorker.state === 'installed') {\n//             if (navigator.serviceWorker.controller) {\n//               // At this point, the updated precached content has been fetched,\n//               // but the previous service worker will still serve the older\n//               // content until all client tabs are closed.\n//               console.log(\n//                 'New content is available and will be used when all ' +\n//                   'tabs for this page are closed. See https://cra.link/PWA.'\n//               );\n\n//               // Execute callback\n//               if (config && config.onUpdate) {\n//                 config.onUpdate(registration);\n//               }\n//             } else {\n//               // At this point, everything has been precached.\n//               // It's the perfect time to display a\n//               // \"Content is cached for offline use.\" message.\n//               console.log('Content is cached for offline use.');\n\n//               // Execute callback\n//               if (config && config.onSuccess) {\n//                 config.onSuccess(registration);\n//               }\n//             }\n//           }\n//         };\n//       };\n//     })\n//     .catch((error) => {\n//       console.error('Error during service worker registration:', error);\n//     });\n// }\n\n// function checkValidServiceWorker(swUrl, config) {\n//   // Check if the service worker can be found. If it can't reload the page.\n//   fetch(swUrl, {\n//     headers: { 'Service-Worker': 'script' },\n//   })\n//     .then((response) => {\n//       // Ensure service worker exists, and that we really are getting a JS file.\n//       const contentType = response.headers.get('content-type');\n//       if (\n//         response.status === 404 ||\n//         (contentType != null && contentType.indexOf('javascript') === -1)\n//       ) {\n//         // No service worker found. Probably a different app. Reload the page.\n//         navigator.serviceWorker.ready.then((registration) => {\n//           registration.unregister().then(() => {\n//             window.location.reload();\n//           });\n//         });\n//       } else {\n//         // Service worker found. Proceed as normal.\n//         registerValidSW(swUrl, config);\n//       }\n//     })\n//     .catch(() => {\n//       console.log('No internet connection found. App is running in offline mode.');\n//     });\n// }\n\n// export function unregister() {\n//   if ('serviceWorker' in navigator) {\n//     navigator.serviceWorker.ready\n//       .then((registration) => {\n//         registration.unregister();\n//       })\n//       .catch((error) => {\n//         console.error(error.message);\n//       });\n//   }\n// }\n\nexport default function serviceworker(){\n\n  let swUrl = `${process.env.PUBLIC_URL}/sw.js`\n  navigator.serviceWorker.register(swUrl)\n  .then((response)=>{\n      console.log(\"response done:-\",response)\n  })\n}\n"],"sourceRoot":""}